name: PYTHON_APP

on:
  push:
    paths:
      - '.github/workflows/python-app.yaml'
      - 'app_python/**'
      - '!app_python/**.md'

defaults:
  run:
    shell: bash
    working-directory: app_python

jobs:
  checks:
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - uses: actions/cache@v1
        id: cache-venv
        with:
          path: ./app_python/.venv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv ./.venv && . ./.venv/bin/activate && pip install -r requirements.txt

      - name: Linter
        if: always()
        run: |
          . ./.venv/bin/activate
          pylint src/ | pylint-json2html -o pylint.html

      - name: Unit tests
        if: always()
        run: |
          . ./.venv/bin/activate
          export PYTHONPATH=`pwd`/src 
          pytest test --junit-xml=test-results.xml

      - uses: snyk/actions/setup@master
      - name: Snyk test for vulnerabilities
        continue-on-error: true
        run: | 
          . ./.venv/bin/activate
          snyk test --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: app_python/snyk.sarif
          category: snyk-python

      - name: Upload Linting artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: linter_report
          path: |
            app_python/pylint.html
            app_python/test-results.xml
          if-no-files-found: error
          retention-days: 90
      - name: Upload JUnit report to Github interface
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: app_python/test-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
  build_deploy:
    needs: checks
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: check ls
        run: pwd
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: app_python
          file: app_python/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-course-app:python
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/devops-course-app:python-buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/devops-course-app:python-buildcache,mode=max